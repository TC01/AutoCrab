#!/usr/bin/env python

# Helper script to automatically generate crab config files.

import optparse
import os
import sys

template_name = "template.cfg"

def getEOSPath(text):
	start = text[text.find("SFN=") + len("SFN="):]
	start = start[:start.find("\n")]

	end = text[text.find("user_remote_dir = ") + len("user_remote_dir = "):]	
	end = end[:end.find("\n")]

	return start + end

def getScaledText(newtext, scaling, isdata):
	scalings = ["scaleup", "scaledown", "smearup", "smeardown"]
	if not scaling in scalings:
		return newtext

	# This is a hack. It works, but it is a hack.
	scaletext = ""
	for line in newtext.split("\n"):
		if "ui_working_dir" or "user_remote_dir" in line:
			if not "datasetpath" in line:
				line += scaling
		scaletext += line + "\n"

	scalestring = "down"
	if "up" in scaling:
		scalestring = "up"
	if "scale" in scaling:
		scaletext.replace("JES=nominal JER=nominal", "JES=" + scalestring + " JER=nominal")
	if "smear" in scaling:
		scaletext.replace("JES=nominal JER=nominal", "JES=nominal JER=" + scalestring)

	return scaletext

def main():
	parser = optparse.OptionParser()
	parser.add_option("-i", "--input", dest="input", default="", help="Input file to process over.")
	parser.add_option("-d", "--data", dest="data", action="store_true", help="Are the inputs data files?")
	parser.add_option("-b", "--dbs", dest="dbs", default="global", help="The DBS to look up datasets in.")
	parser.add_option("-s", "--scale", dest="scale", action="store_true", help="Generate scale files in scalings/.")
	parser.add_option("-r", "--smearing", dest="smearing", action="store_true", help="Generate smearing files in smearings/.")
	parser.add_option("-c", "--scheduler", dest="scheduler", default="remoteGlidein", help="The scheduler to use.")
	options, args = parser.parse_args()

	short_args = []
	if options.input == "":
		for arg in args:
			reduced = arg[1:]
			short_arg, b, garbage = reduced.partition("/")
			short_args.append(short_arg)
	else:
		with open(options.input) as input_file:
			for line in input_file:
				reduced = arg[1:]
				short_arg, b, garbage = reduced.partition("/")
				short_args.append(short_arg)

	text = ""
	with open(template_name, 'rb') as template:
		text = template.read()
	if text == "":
		print "Error: failed to read template file."
		sys.exit(1)

	for i in range(len(args)):
		short_arg = short_args[i]
		long_arg = args[i]
		print "Processing " + short_arg + ", writing config file."
		newtext = text.replace("$INS_SHORTNAME_HERE", short_arg)
		newtext = newtext.replace("$INS_LONGNAME_HERE", long_arg)
		if options.dbs != "global":
			newtext = newtext.replace("#dbs_url = phys03", "dbs_url = " + options.dbs)
		if options.data:
			newtext = newtext.replace("#lumi_mask", "lumi_mask")
			newtext = newtext.replace("RunOnData=0", "RunOnData=1")
		newtext = newtext.replace("scheduler = remoteGlidein", "scheduler = " + options.scheduler)
		with open(short_arg + ".cfg", "wb") as newfile:
			newfile.write(newtext)

		if options.scale:
			if not os.path.exists("scalings"):
				os.mkdir("scalings")
			with open("scalings/" + short_arg + "_scaledown.cfg", "wb") as downfile:
				scaletext = getScaledText(newtext, 'scaledown')
				downfile.write(scaletext)
			with open("scalings/" + short_arg + "_scaleup.cfg", "wb") as upfile:
				scaletext = getScaledText(newtext, 'scaleup')
				upfile.write(scaletext)
		if options.smearing:
			if not os.path.exists("smearings"):
				os.mkdir("smearings")
			with open("smearings/" + short_arg + "_smeardown.cfg", "wb") as downfile:
				scaletext = getScaledText(newtext, 'smeardown')
				downfile.write(scaletext)
			with open("smearings/" + short_arg + "_smearup.cfg", "wb") as upfile:
				scaletext = getScaledText(newtext, 'smearup')
				upfile.write(scaletext)			

		directory = getEOSPath(newtext)
		try:
			os.mkdir(directory)
			print "Created directory " + directory
		except:
			print "Error creating directory."

if __name__ == '__main__':
	main()
